{"version":3,"sources":["components/Fishing.js","App.js","serviceWorker.js","index.js"],"names":["waiting","hooked","cast","console","log","setTimeout","setInterval","min","max","time","Math","floor","random","randomTime","Fishing","useState","fish","catchFish","reelIn","alert","className","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wQAGIA,G,OAAU,GACVC,GAAS,EASPC,EAAO,WACLF,EACAG,QAAQC,IAAI,yDAGhBJ,GAAU,EACVK,YAAW,WACFL,IACLG,QAAQC,IAAR,8BACAH,GAAS,EACTK,aAAY,WACRD,YAAW,WACFJ,IAGLE,QAAQC,IAAI,kBACZJ,GAAU,EACVC,GAAS,KACV,WAzBI,SAACM,EAAKC,GACrB,IAAMC,EAAOC,KAAKC,MAAMD,KAAKE,UAAUJ,EAAID,EAAI,GAAGA,GAGlD,OAFAJ,QAAQC,IAAI,mBACZD,QAAQC,IAAI,yBACLK,EAuBJI,CAAW,IAAM,SAGT,SAASC,IAAW,IAAD,EACJC,mBAAS,GADL,mBACvBC,EADuB,KACjBC,EADiB,KAGxBC,EAAS,WACX,GAAKlB,EAIL,OAAIA,IAAYC,GACZE,QAAQC,IAAI,+CACZJ,GAAU,KAGdG,QAAQC,IAAI,sBACZH,GAAS,EACTD,GAAU,EACHiB,EAAUD,EAAO,IAXpBG,MAAM,qCAcd,OACI,yBAAKC,UAAU,qBACX,yBAAKA,UAAU,mBAAmBC,QAASH,IAC3C,yBAAKE,UAAU,qBACX,sCAAYJ,EAAZ,iBACA,4BAAQK,QAASnB,GAAjB,QACA,4BAAQmB,QAASH,GAAjB,a,MCjDDI,MARf,WACE,OACE,yBAAKF,UAAU,OACb,kBAACN,EAAD,QCKcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.bbe25528.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './FishingStyle.css'\r\n\r\nlet waiting = false\r\nlet hooked = false\r\n\r\nconst randomTime = (min, max) => {\r\n    const time = Math.floor(Math.random()*(max-min+1)+min);\r\n    console.log(\"Casting line...\")\r\n    console.log(\"Waiting for a bite...\")\r\n    return time;\r\n}\r\n\r\nconst cast = () => {\r\n    if (waiting) {\r\n        console.log(\"You must reel in your hook before you may cast again\")\r\n        return;\r\n    }\r\n    waiting = true\r\n    setTimeout(() => {\r\n        if (!waiting) return;\r\n        console.log(`You have a bite! Catch it!`);\r\n        hooked = true;\r\n        setInterval(() => {\r\n            setTimeout(() => {\r\n                if (!hooked) {\r\n                    return;\r\n                };\r\n                console.log(\"It got away...\")\r\n                waiting = false\r\n                hooked = false;\r\n            }, 700)\r\n        })\r\n    }, randomTime(7000, 35000))    \r\n}\r\n\r\nexport default function Fishing() {\r\n    const [fish, catchFish] = useState(0);\r\n\r\n    const reelIn = () => {\r\n        if (!waiting) {\r\n            alert(\"You have not cast your line out!\")\r\n            return\r\n        }\r\n        if (waiting && !hooked) {\r\n            console.log(\"You reel in your hook with no success.\")\r\n            waiting = false\r\n            return\r\n        }\r\n        console.log(\"You caught a fish!\")\r\n        hooked = false\r\n        waiting = false\r\n        return catchFish(fish + 1)\r\n    }\r\n\r\n    return (\r\n        <div className=\"Fishing-Container\">\r\n            <div className=\"Fishing-Viewport\" onClick={reelIn} />\r\n            <div className=\"Fishing-Dashboard\" >\r\n                <p>Caught: {fish} üêü</p>\r\n                <button onClick={cast}>Cast</button>\r\n                <button onClick={reelIn}>Reel In</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport Fishing from './components/Fishing'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Fishing />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}